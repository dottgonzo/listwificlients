"use strict";
var child_process = require("child_process");
var Promise = require("bluebird");
function listwifi(device) {
    return new Promise(function (resolve, reject) {
        child_process.exec('iw dev ' + device + ' station dump', function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                var reallist = [];
                var list = stdout.split('\n');
                for (var i = 0; i < stdout.split('\n').length; i++) {
                    if (stdout.split('\n')[i].split('Station ').length > 1) {
                        var station = { mac: stdout.split('\n')[i].split('Station ')[1].split(' ')[0], signal: '' };
                        reallist.push(station);
                    }
                    else if (stdout.split('\n')[i].split('signal: ').length > 1) {
                        if (stdout.split('\n')[i].split('signal: ')[1].split('\t')[1].split('[').length > 1) {
                            reallist[reallist.length - 1].signal = stdout.split('\n')[i].split('signal: ')[1].split('\t')[1].split('[')[0] + 'dBm';
                            reallist[reallist.length - 1].signalMin = stdout.split('\n')[i].split('signal: ')[1].split('[')[1].split(',')[0] + ' dBm';
                            reallist[reallist.length - 1].signalMax = stdout.split('\n')[i].split('signal: ')[1].split('[')[1].split(', ')[1].split(']')[0] + ' dBm';
                        }
                        else {
                            reallist[reallist.length - 1].signal = stdout.split('\n')[i].split('signal: ')[1].split('\t')[1];
                        }
                    }
                }
                resolve(reallist);
            }
        });
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = listwifi;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLGFBQWEsV0FBTSxlQUUvQixDQUFDLENBRjZDO0FBRTlDLElBQVksT0FBTyxXQUFNLFVBR3pCLENBQUMsQ0FIa0M7QUFZbkMsa0JBQWlDLE1BQWM7SUFDM0MsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFnQixVQUFDLE9BQU8sRUFBRSxNQUFNO1FBQzlDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sR0FBRyxlQUFlLEVBQUUsVUFBVSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU07WUFFbEYsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDZixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRUosSUFBTSxRQUFRLEdBQWlCLEVBQUUsQ0FBQTtnQkFDakMsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFFL0IsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUNqRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDckQsSUFBSSxPQUFPLEdBQWUsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUUsQ0FBQTt3QkFDckcsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtvQkFDMUIsQ0FBQztvQkFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzVELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBQ2xGLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQTs0QkFDdEgsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFBOzRCQUN6SCxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFBO3dCQUU1SSxDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNKLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7d0JBRXBHLENBQUM7b0JBQ0wsQ0FBQztnQkFFTCxDQUFDO2dCQUNELE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUNyQixDQUFDO1FBR0wsQ0FBQyxDQUFDLENBQUE7SUFFTixDQUFDLENBQUMsQ0FBQTtBQUlOLENBQUM7QUF0Q0Q7MEJBc0NDLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjaGlsZF9wcm9jZXNzIGZyb20gXCJjaGlsZF9wcm9jZXNzXCJcblxuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tIFwiYmx1ZWJpcmRcIlxuXG5cbmludGVyZmFjZSBJV2lmaUNsaWVudCB7XG4gICAgbWFjOiBzdHJpbmc7XG4gICAgc2lnbmFsOiBzdHJpbmc7XG4gICAgc2lnbmFsTWluPzogc3RyaW5nO1xuICAgIHNpZ25hbE1heD86IHN0cmluZztcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3R3aWZpKGRldmljZTogc3RyaW5nKTpQcm9taXNlPElXaWZpQ2xpZW50W10+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8SVdpZmlDbGllbnRbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjaGlsZF9wcm9jZXNzLmV4ZWMoJ2l3IGRldiAnICsgZGV2aWNlICsgJyBzdGF0aW9uIGR1bXAnLCBmdW5jdGlvbiAoZXJyLCBzdGRvdXQsIHN0ZGVycikge1xuXG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZWFsbGlzdDpJV2lmaUNsaWVudFtdID0gW11cbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0ID0gc3Rkb3V0LnNwbGl0KCdcXG4nKVxuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGRvdXQuc3BsaXQoJ1xcbicpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGRvdXQuc3BsaXQoJ1xcbicpW2ldLnNwbGl0KCdTdGF0aW9uICcpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGF0aW9uOklXaWZpQ2xpZW50ID0geyBtYWM6IHN0ZG91dC5zcGxpdCgnXFxuJylbaV0uc3BsaXQoJ1N0YXRpb24gJylbMV0uc3BsaXQoJyAnKVswXSxzaWduYWw6JycgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhbGxpc3QucHVzaChzdGF0aW9uKVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0ZG91dC5zcGxpdCgnXFxuJylbaV0uc3BsaXQoJ3NpZ25hbDogJykubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZG91dC5zcGxpdCgnXFxuJylbaV0uc3BsaXQoJ3NpZ25hbDogJylbMV0uc3BsaXQoJ1xcdCcpWzFdLnNwbGl0KCdbJykubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWxsaXN0W3JlYWxsaXN0Lmxlbmd0aCAtIDFdLnNpZ25hbCA9IHN0ZG91dC5zcGxpdCgnXFxuJylbaV0uc3BsaXQoJ3NpZ25hbDogJylbMV0uc3BsaXQoJ1xcdCcpWzFdLnNwbGl0KCdbJylbMF0gKyAnZEJtJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWxsaXN0W3JlYWxsaXN0Lmxlbmd0aCAtIDFdLnNpZ25hbE1pbiA9IHN0ZG91dC5zcGxpdCgnXFxuJylbaV0uc3BsaXQoJ3NpZ25hbDogJylbMV0uc3BsaXQoJ1snKVsxXS5zcGxpdCgnLCcpWzBdICsgJyBkQm0nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhbGxpc3RbcmVhbGxpc3QubGVuZ3RoIC0gMV0uc2lnbmFsTWF4ID0gc3Rkb3V0LnNwbGl0KCdcXG4nKVtpXS5zcGxpdCgnc2lnbmFsOiAnKVsxXS5zcGxpdCgnWycpWzFdLnNwbGl0KCcsICcpWzFdLnNwbGl0KCddJylbMF0gKyAnIGRCbSdcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFsbGlzdFtyZWFsbGlzdC5sZW5ndGggLSAxXS5zaWduYWwgPSBzdGRvdXQuc3BsaXQoJ1xcbicpW2ldLnNwbGl0KCdzaWduYWw6ICcpWzFdLnNwbGl0KCdcXHQnKVsxXVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlYWxsaXN0KVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSlcblxuICAgIH0pXG5cblxuXG59XG4iXX0=
